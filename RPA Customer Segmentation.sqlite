-- 1
-- What are the column names?
SELECT *
FROM users
LIMIT 20;
 
-- 2
-- Find the email addresses and birthdays of users whose 
-- birthday is between 1980-01-01 and 1989-12-31.
SELECT email, birthday
FROM users
WHERE birthday BETWEEN '1980-01-01' AND '1989-12-31';
   
-- 3
-- Find the emails and creation date of users 
-- whose created_at date matches this condition.
SELECT email, created_at
FROM users
WHERE created_at < '2017-05-01';

-- 4
-- Find the emails of the users who received the ‘bears’ test.
SELECT email, test
FROM users
WHERE test = 'bears';

-- 5
-- Find all the emails of all users who 
-- received a campaign on website BBB.
SELECT email, campaign
FROM users
WHERE campaign LIKE 'BBB%';

-- 6
-- Find all the emails of all users who received ad copy 2 in 
-- their campaign.
SELECT email, campaign
FROM users
WHERE campaign LIKE '%2'

-- 7
-- Find the emails for all users who received both a campaign and a test. 
-- These users will have non-empty entries in the 
-- campaign and test columns.

-- This didn't work!

-- SELECT email, campaign, test
-- FROM users
-- WHERE campaign IS NOT NULL
--   AND test IS NOT NULL;

-- 8
-- Challenge
-- One of the members of the marketing team had an idea of calculating
-- how old users were when they signed up.

-- The following is a list of everything that did not work.  
-- Some of the answer code codecademy provided did not work, so I'm not sure if any of these *actually* don't work.

-- SELECT email, birthday, 
--   (created_at - birthday) AS age
-- FROM users;

-- select email, birthday, cast(strftime(’%Y.%m%d’, ‘created_at’) - strftime(’%Y.%m%d’, birthday) as int)
-- from users
-- limit 5;

-- SELECT email
-- , date(created_at) - date(birthday)
-- FROM users;

-- SELECT cast((julianday(created_at) - julianday(birthday)) / 365 as int) as registered_age
-- FROM users
-- LIMIT 10;

-- SELECT *, created_at - birthday AS age_at_signup
-- FROM users

-- SELECT CAST(julianday(created_at) - julianday(birthday) as integer) / 365 FROM users;

-- SELECT CAST(julianday(created_at) - julianday(birthday) as integer) / 365 FROM users;
-- SELECT *,
-- CASE
-- WHEN created_at IS NOT NULL
-- AND birthday IS NOT NULL
-- THEN (created_at - birthday)
-- END AS age
-- FROM users;

-- ALTER TABLE USERS
-- ADD age INT;
-- UPDATE USERS
-- SET AGE = CREATED_AT - BIRTHDAY
-- WHERE AGE IS NULL;

-- SELECT email, (created_at) - (birthday) AS age
-- FROM users;
